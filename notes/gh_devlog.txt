== 2019-05-13 ==
Attempted to build with latest code pull from github.com/b2256; encountered build errros; installed following packages:
  ros-kinetic-driver-base
  ros-kinetic-camera1394
Cleaned up build environemnt: Added a .gitignore with the build/** and devel/** directories.

Set OBDII default polling rate to 10Hz in obdii_interface.launch.


=== Ladybug 6-way camera ===
Read LadyBug technical manual on interface
  - No compressed JPG image support on Linux; that's probably okay as we want the raw frames, which will be discarded once they're no longer needed in the pipeline.
  - GithubFlos/README.txt contains several disturbing references to "Windows" and "the windows pc running the ladybug grabber."  TODO: Will need to acquire raw image data from Ladybug and create a ROS receiver for this; need to cut off any and all dependencies upon Windows.
  - NOTE: Once we have image data will need to get bag data.

GOAL: Obtain raw image data in ROS bags from all six Ladybug cameras.

URDF MODEL: Want a sim w/Gazebo?

Firewire (1394b): 800Mbps (theoretical upper limit)
Framerate: 16 FPS w/JPEG compression, 6.5 FPS uncompressed.  Possible issue if Linux only supports uncompressed data...

Resources:
https://github.com/ros-drivers/camera1394/issues/63
http://wiki.ros.org/camera1394/Tutorials/UsingMultipleIEEE1394Cameras
https://answers.ros.org/question/9602/ladybug-camera-driver/
https://github.com/ros-drivers/camera1394/issues/17 (bricebsamen)

Check into pointgrey_camera_driver:
http://wiki.ros.org/pointgrey_camera_driver
This looks very promising... Nope, after further evaluation, black-and-white or slow frame rate.

Must have:
  Image data
Nice-to-have / better framerate
  JPEG data
    * They seem to want to shove the user toward Windows for this (the slower operating system gets the faster frame rate).
    * A potential down side to JPEG would be the possible need to decompress later in the pipeline.  However, there may not be a need for this since the lasers are fully integrated with laser and their own camera; telemetric correlation data from GPS would then be sufficient to key the image...

==== Notes from discussion with Bruce ====

 - Sensor package:
   * 3 Sick lasers, which include integrated acquisition,
     - RS422 interface to central hub
   * accelerometer
   * GPS
     - Double feed: centeral hub and ladybug daemon)
 - No robot model yet, still putting all the pieces together.
 - Ladybug3 is least understood of all the components.
 - Need to find out if all six cameras can be set to trigger at same time.
 - Immediate first goal is to explore 1394 library for ladybug.
 - Detailed levels of scanning w/lasers and closer to survey grade models required only at intersections.  A key concern is position of curbs for truck turning radius.
 - Study Robot Localization, which gathers and normalizes all the sensor data.



Nonbillable hours:
  - Setup of different Linux/ROS version from previous projects for reference only: 5.5

Billable hours:
  - Ramp-up and research into project-specific components: 5

== 2019-05-14 ==

http://wiki.ros.org/camera1394/Tutorials/ConnectingToIEEE1394Camera

Additional research into possible approaches.  Need to look at existing code before pulling in.

Pulled in Windows and Linux ladybug libraries

Spoke to Steven at FLIR to get the SDK download URL.  Confirmed that this SDK supports Ladybug3.  It is also no longer just for Windows.  Steven confirmed that, while FLIR does not officially support ROS, there is a large ROS community using their products.  Only Ubuntu 16.04 is officially supported.

Found SDK:
"This is the latest version of the Ladybug SDK which supports Ladybug2, Ladybug3, Ladybug5, and Ladybug5+. The initial Linux version of the Ladybug library supports both 1394 and USB3 cameras on Ubuntu 16.04 (both x86 and x86_64). The initial Linux SDK focuses on image acquisition, stream recording and GPS support via a command line application (LadybugRecorderConsole)."

Downloaded SDK from:

https://www.flir.com/support/products/ladybug-sdk#Resources

Installed:
sudo dpkg -i ladybug-1.16.3.48_amd64.deb

dependency error, missing xsdcxx
sudo apt install xsdcxx

NOTE: Add users using 1394 cards to pgrimaging group for correct permissions.
Added user "dev" to this group upon prompting from installer

Again, attempted to install SDK:
sudo dpkg -i ladybug-1.16.3.48_amd64.deb


Ladybug installed successfully.

LadyBugRecorderConsole runs, although no cameras are found.



moved ros-ladybug to src/ directory

catkin_make elicited

CMake Error at ros-ladybug/CMakeLists.txt:148 (add_library):
  Cannot find source file:

    src/common/protobuf/imageMessage.pb.cc

  Tried extensions .c .C .c++ .cc .cpp .cxx .m .M .mm .h .hh .h++ .hm .hpp
  .hxx .in .txx

Installed all ros-kinetic image libraries:
sudo apt install ros-kinetic-image-*

Nope.  However, we'll still need these libraries.

Installing and building Google protobufs as per https://gist.github.com/cqpx/ff1c0751e04bdd027468226d75b39d8a

  sudo apt-get install -y git autoconf automake libtool curl make g++ unzip
  git clone https://github.com/google/protobuf.git
  cd protobuf/
  ./autogen.sh
  ./configure
  make
  make check
  sudo make install
  sudo ldconfig # refresh shared library cache.
  protoc -h

Error on make check:
  make[1]: Entering directory '/home/dev/install/protobuf'
  make  check-local
  make[2]: Entering directory '/home/dev/install/protobuf'
  Making lib/libgmock.a lib/libgmock_main.a in gmock
  /bin/bash: line 0: cd: third_party/googletest/googletest: No such file or directory
  Makefile:2135: recipe for target 'check-local' failed
  make[2]: *** [check-local] Error 1
  make[2]: Leaving directory '/home/dev/install/protobuf'
  Makefile:1997: recipe for target 'check-am' failed
  make[1]: *** [check-am] Error 2
  make[1]: Leaving directory '/home/dev/install/protobuf'
  Makefile:1709: recipe for target 'check-recursive' failed
  make: *** [check-recursive] Error 1

Glog:
sudo apt install libgoogle-glog-dev
sudo apt install libgtest-dev

Back in project root (catkin_ws), catkin_make clean shows another slew of errors and warnings:

	CMake Warning (dev) at camera1394stereo/CMakeLists.txt:58 (add_dependencies):
		Policy CMP0046 is not set: Error on non-existent dependency in
		add_dependencies.  Run "cmake --help-policy CMP0046" for policy details.
		Use the cmake_policy command to set the policy and suppress this warning.

		The dependency target "camera1394stereo_EXPORTED_TARGETS" of target
		"camera1394stereo_node" does not exist.
	This warning is for project developers.  Use -Wno-dev to suppress it.

	CMake Error: CMake can not determine linker language for target: receiver_nodelet
	CMake Error: Cannot determine link language for target "receiver_nodelet".
	CMake Error: CMake can not determine linker language for target: service
	CMake Error: Cannot determine link language for target "service".
	CMake Error: CMake can not determine linker language for target: receiver
	CMake Error: Cannot determine link language for target "receiver".
	-- Generating done
	-- Build files have been written to: /home/dev/git/obdii_ros/build
	Invoking "cmake" failed

catkin_make fails with the following:

make[2]: *** No rule to make target 'ros-ladybug/CMakeFiles/receiver_nodelet.dir/build'.  Stop.

Removed "system_lib" dependencies from ros-ladybug/CMakeLists.txt and bag2orb/CMakeLists.txt.  This is intended to be an example, not a literal library (see https://answers.ros.org/question/288967/build-package-with-system_lib-not-found/)

Warning:

  Make Warning (dev) at gps_umd/gps_common/CMakeLists.txt:54 (add_executable):
  Policy CMP0037 is not set: Target names should not be reserved and should
  match a validity pattern.  Run "cmake --help-policy CMP0037" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.i

CMP0046 documentation:

	CMP0046
	-------

	Error on non-existent dependency in add_dependencies.

	CMake 2.8.12 and lower silently ignored non-existent dependencies
	listed in the ``add_dependencies()`` command.

	The OLD behavior for this policy is to silently ignore non-existent
	dependencies. The NEW behavior for this policy is to report an error
	if non-existent dependencies are listed in the ``add_dependencies()``
	command.

Not addressing at this time; possibly set the policy to OLD for now since this is only a warning, but this is not on critical path...

Commented out lines 149, 169, 225 of ros-ladybuf/CMakeLists.txt.  find -iname 'imageMessage.pb.cc' turned up nothing; why is a non-existent file being included? (Note: we may need to hunt this down later)

Error:
In file included from /home/dev/git/obdii_ros/src/ros-ladybug/include/zmq_service.h:4:0,
                 from /home/dev/git/obdii_ros/src/ros-ladybug/src/service/node.cpp:4:
/home/dev/git/obdii_ros/src/ros-ladybug/include/zmq.hpp:28:17: fatal error: zmq.h: No such file or directory

Install zmq lightweight messaging kernel:
sudo apt install libzmq-dev

zmq.h now present; check if it's a target link dependency; it is (CMakeLists.txt:158).

More comp.aints about the nonexistent protobuf/imageMessage.pb.h...  Need to find what this, where to get it, and why it's missing though referenced.  It's a generated file from Google Protocol Buffers; now how do we generate it?

Check if it's supposed to be generated as part of build process...

Maybe Google protobufs compiled from source was incorrect; README.txt only references "protobuff" [sic].

sudo apt install protobuf-compiler

Aha... It's a sub-repository in Git.  Copying off my ros-ladybug and re-cloning with this command.

git clone --recurse-submodules git://github.com/foo/bar.git

Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
fatal: clone of 'git@github.com:Flos/ladybug_calibration.git' into submodule path 'calibration' failed

I don't want to use a "public key".  I want to be given the choice to enter a password and use the https portal...  However, in the interest of expediency, will attempt to add my github SSH key and clone that way.  Working, pulling objects... Completed...

src/ros-ladybug/src/common/protobuf now contains files...

	CMake Error at ros-ladybug/CMakeLists.txt:148 (add_library):
		Cannot find source file:

			src/common/protobuf/imageMessage.pb.cc

Okay, attempting to build the compiled imageMessage.pb.cc from imageMessage.proto manually -- COME BACK TO THIS; building should be one command eventually (catkin_make)....

After some digging:

protoc -I=. --cpp_out=. imageMessage.proto

Run this from src/ros-ladybug/src/common/protobuf.

Note, this will yield the following warning:

	[libprotobuf WARNING google/protobuf/compiler/parser.cc:637] No syntax specified for the proto file: imageMessage.proto. Please use 'syntax = "proto2";' or 'syntax = "proto3";' to specify a syntax version. (Defaulted to proto2 syntax.)

It's unclear, given the lack of documentation both online and in the repo around ros-ladybug, which syntax it prefers, so probably will have to do some trial-and-error.

New build errors -- lots of them:

/home/dev/git/obdii_ros/src/ros-ladybug/src/common/protobuf/imageMessage.pb.h:1821:30: error: expected ‘}’ before end of line

Errors extended past top of terminal buffer; rebuilt and got root:

/usr/include/c++/5/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the ISO C++ 2011 standard. This support must be enabled with the -std=c++11 or -std=gnu++11 compiler options.

Added -std=c++11 to build options for ros-ladybug CMakeLists.txt:
	include(CheckCXXCompilerFlag)
	check_cxx_compiler_flag(-std=c++11 HAS_STD_CPP11_FLAG)
	if(HAS_STD_CPP11_FLAG)
		add_compile_options(-std=c++11)
	endif()


zmq is wrong version;

	sudo apt-remove

Verify that zmq.h is gone.  Now, reinstall it from a newer repo:

	echo "deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./" >> /etc/apt/sources.list
	wget https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key -O- | sudo apt-key add
	apt-get install libzmq3-dev

(Ubuntu 16.04 is Debian 9)

And, play it again, Sam, to get the next spate of errors...

New error:

	/home/dev/git/obdii_ros/src/ros-ladybug/include/zmq.hpp:550:47: error: ‘zmq_event_t’ does not name a type
					 virtual void on_event_connected(const zmq_event_t &event_, const char* addr_) { (void

Investigating that...

Looks like it installed ZMQ 4.1.4.  Going to have to pull the source and include 3.2.5 (it doesn't have 3.2.4) explicitly.  Following instructions at http://zeromq.org/intro:get-the-software

Rather than re-installing an older version of ZMQ (which may actually break ROS), added an include directive in CMakeLists.txt:

	add_compile_options(-I=/home/dev/install/zeromq-3.2.5/include)

(NOTE, there's a hardcoded username, "dev" in that string; COME BACK TO THIS; baby steps)

We're passed the "error: 'zmq_event_t' does not name a type" errors; now the error is:

  /home/dev/git/obdii_ros/src/ros-ladybug/src/common/opencv_helper.cpp:34:9: error: ‘imdecode’ is not a member of ‘cv’

Suspecting this an OpenCV 2.4 vs. OpenCV 3 problem...  Possible answer here:

  https://stackoverflow.com/questions/33707500/error-imread-is-not-a-member-of-cv

in ros-ladybug/include/opencv_helper.h, commented out opencv/cv.h and added opencv2/opencv.hpp

	// #include <opencv/cv.h>
	#include <opencv2/opencv.hpp>

Now build completed and erroring out on link:

  /usr/bin/ld: cannot find -lzmq

Trying to put zmq back...

  sudo apt install libzmq3-dev

Build now completes to 84% then errors on link:

  CMakeFiles/service.dir/src/common/protobuf/imageMessage.pb.cc.o: In function `ladybug5_network::ImageType_descriptor()':
imageMessage.pb.cc:(.text+0x493): undefined reference to `google::protobuf::internal::AssignDescriptors(google::protobuf::internal::DescriptorTable const*)'

From https://github.com/BVLC/caffe/issues/3046

  sudo apt install --reinstall libprotobuf-dev protobuf-compiler

No dice, same error...

https://stackoverflow.com/questions/47786852/unable-to-use-locally-installed-protocol-buffers-inside-ros

Revisiting protocol buffers...

Uncommented find_package(Protobuf REQUIRED) in CMakeLists.txt.

Same errors;
undefined reference to `google::protobuf::internal::

https://github.com/protocolbuffers/protobuf/issues/4001

Uninstalled libprotobuf-dev, which completely wiped out ROS because of dependencies.  Thus, we know that ROS depends on the latest version of protobuf.  Re-evaluating: instead of shoehorning the world to fit ros-ladybug, we'll go the other way...

Reinstalled ROS cleanly, and zmq-dev.  First target is ros-ladybug/include/zmq.hpp...

This is taking too long, and there's no guarantee Ladybug5 for which this was written can be downshifted to Ladybug3.  Going to switch to looking at camera1394 again.

installed coriander
sudo apt-get install coriander

Billable hours:
8.0

== 2019-05-15 ==

Working on calling the SetRegistersRequest services on camera1394.

From https://github.com/ros-drivers/camera1394/pull/32:

  Possible implementation (draft) of #30.

  Other dc1394_get/set_register(s) functions could be wrapped in a similar way. The messages are generic to be used with all of them.

  I tested it on Ubuntu 12.04/Hydro with Ladybug 3, selecting/querying sensors (side cameras, top camera) participating in auto exposure using

  rosservice call /camera/set_camera_registers "{type: 0, offset: 0x1E90, value: [0b111110]}"
  rosservice call /camera/set_camera_registers "{type: 0, offset: 0x1E90, value: [0b000001]}"
  rosservice call /camera/get_camera_registers "{type: 0, offset: 0x1E90, num_regs: 1}"

  and selecting/querying images for transmission (all cameras, side cameras).

  rosservice call /camera/set_camera_registers "{type: 0, offset: 0x1E88, value: [0xffffff]}"
  rosservice call /camera/set_camera_registers "{type: 0, offset: 0x1E88, value: [0xfffff0]}"
  rosservice call /camera/get_camera_registers "{type: 0, offset: 0x1E88, num_regs: 1}"

Working on plumbing for ros::service calls...  Documentation is minimal, but the header files are readily available under /opt/ros/kinetic/camera1394.

Distilled down from the heavy C++ templating, a request contains type, offset, value, and mode.  Value is not a simple scalar integer, but a vector of uint13_t, perhaps for serial writing of values to the same offset.

Planning for camera data stream:

* Ladybug image grab
* camera1394 nodelet
* Decompression (JPEG -> Raw)
* Color processing (Bayer)
* undistort (rectification; will need lens K and D calibration coefficients; does it exist or do we need to create them using the chessboard and undistort?
* stitch (see /usr/src/ladybug/src/ladybugPanoStitchExample/ladybugPanoStitchExample.cpp)
* projection

Variables:
* Are we running 1394b (800Mb/S) or 1394a (400Mb/S)?  This will affect our frame rate.  Assuming it's the IEEE-1394b ExpressCard for notebooks that comes with the development kit (p. 26).
* Drive throughput will also affect performance.  The Technical Reference recommends a striped RAID array, the lack of which is a potential bottleneck...
* We can power the camera using VExt (Pin 7 on the Hirose HR25 connector, 8-30VDC) (p. 28) and direct connection to the vehicle's power supply (typically 12-14VDC).

Created a new ladybug3camera project using camera1394stereo as a base, with intent to 1) elminate unwanted "stereo" features; and 2) add the necessary Ladybug3-specific features (like Mode 7)

Add include directories for Ladybug SDK

Investigated whether registers can be written more directly than with the ros::service call..  In this investigation, noted that the camera1394stereo package was authored in 2011 while the ros::service calls for setting registers was not added until mid-2014.

OBDII:
Looked into possible cause of OBDII issues.
From Linux man pages for read():
  RETURN VALUE         top

       On success, the number of bytes read is returned (zero indicates end
       of file), and the file position is advanced by this number.  It is
       not an error if this number is smaller than the number of bytes
       requested; this may happen for example because fewer bytes are
       actually available right now (maybe because we were close to end-of-
       file, or because we are reading from a pipe, or from a terminal), or
       because read() was interrupted by a signal.  See also NOTES.

If there's ever a situation where the bytes available is smaller than the an_decoder packet size, could result in data left over from previous read.  TODO: Check this when on site: add a trigger for byte size less than total packet size.

Billable hours: 6.5

== 2019-05-16 ==

Pivoting back to image pipeline, with intent to find out in the new camera1394-based "ladybug3camera3camera3camera" package, the code where the data is actually pulled from the 1394 into the buffer.  From there, we'll look at jpeg decompression.  Also continuing to explore the LadybugSDK; still have not found any linkable libraries -- where are they?

Libraries are here:
	./usr/lib/ladybug/libladybug.so.1.16.3.48
	./usr/lib/ladybug/libladybug.so.1
	./usr/lib/ladybug/libladybug.so

Incision point for JPEG decompression found driver1394stereo.cpp:296 just prior to publication.

Need rosbridge for image publication per https://answers.ros.org/question/99831/publish-file-to-image-topic/

  sudo apt install ros-kinetic-rosbridge-*

I want to be able to see the realtime image with image_view as this will be important for testing/debugging.

Investigated the camera1394stereo_nodelet.xml, which seems to elicit problems at runtime.  Why is this necessary, and is it still necessary in Kinetic?  It's necessary to run the node as a nodelet, which "designed to provide a way to run multiple algorithms in the same process with zero copy transport between algorithms" (http://wiki.ros.org/nodelet).  Looks like it's not being installed.  Added to CMakeLists.txt, to install in the install/share directory.

ladybug3camera now launches, emitting the expected error opening port, since no camera is connected in the current environment.

Changed topic names from 'stereo_camera' to 'ladybug3_camera' - leaving the underscore deliberately for string/context disambiguation.

Note on Ladybug3 image pipeline philosophy: the camera firmware relies on image compression to overcome the bottleneck of the 1394b 800Mbps interface.  This, however, imposes a slight processing burden on the software running on the host to then decompress these images for display.  It will prove desirable to monitor unstitched images as part of the pipeline for realtime monitoring of the system (i.e. is it running and recording data?).

Billable hours:
2.5

== 2019-05-17 ==

Investigated and added mono support for the ladybug3camera nodes.

Billable hours:
0.25

== 2019-05-20 ==

Onsite, ran through camera connectivity checks.  Verified operational under Windows; found we were using wrong PCIe slot.  Attempting to run LadyBugRecorderConsole on Linux failed.  Attempting to get ladybug3camera ros nodelet running as this will afford a finer grain of control over the camera registers.

10:43 a.m.: Achieved output from camera.  It is not correct image data, but this is expected as the image data is in JPEG format.  We will need to extract the JPEG...  Want to see if I can run camera directly from my development system...

Attempted to run virtualization of PCI from host; not worth the effor, per https://www.virtualbox.org/manual/ch09.html#pcipassthrough.  Would need to install full ROS stack on host.  Abandoning this effort for now.




